//  Solution to Problem => Scramble Strings using Matrix Chain Multiplication DP

// Problem => 

//   We can scramble a string s to get a string t using the following algorithm:

//   If the length of the string is 1, stop.
//   If the length of the string is > 1, do the following:
//   Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.
//   Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.
//   Apply step 1 recursively on each of the two substrings x and y.
//   Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.

 //  Solution 
 
 
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    bool helper(string s1, string s2, unordered_map<string, bool> &m)
    {
        if(s1.size()!=s2.size()){
            return false;
        }
        if(s1.compare(s2)==0){
            return true;
        }
        string temp = s1+"-"+s2;
        if(m.find(temp) != m.end()){
            return m[temp];
        }
        int n = s1.size();
        bool res;
        for(int k=0; k<n-1; k++){
            string s1a = s1.substr(0, k+1);
            string s1b = s1.substr(k+1, n-1-k);
            res = (helper(s1a, s2.substr(0,k+1),m) && helper(s1b, s2.substr(k+1, n-1-k),m))
                || (helper(s1a, s2.substr(n-k-1, k+1),m) && helper(s1b, s2.substr(0, n-1-k),m));
            if(res){
                return m[temp] = true;
            }
        }
        return m[temp] = false;
    
    }
    
    
    
    bool isScramble(string s1, string s2) {
        if(s1.size()!=s2.size()){
            return false;
        }
        if(s1.compare(s2)==0){
            return true;
        }
        unordered_map<string, bool> m;
        int n = s1.size();
        return helper(s1,s2,m);
    }
};

int main(){
    Solution obj2;
    string s1, s2;
    cout << "Enter the first string : " ;
    cin >> s1;
    cout << "Enter the second string : ";
    cin >> s2;
    if(obj2.isScramble(s1, s2)){
          cout << "Strings are Scramble to each other.\n";
    }
    else{
          cout << "Strings are not Scramble.\n";
    }
    return 0;
}

